version: '3.8'

services:
  # Eureka 서비스 디스커버리
  eureka-server:
    build: 
      context: ./eureka-service
      dockerfile: Dockerfile
    container_name: eureka-server
    restart: unless-stopped
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis 캐시 (공용)
  redis:
    image: redis:7-alpine
    container_name: microservice-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservice-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-1234}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # User Service DB
  user-db:
    image: mysql:8.0
    container_name: user-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-1234}
      MYSQL_DATABASE: user_service
      MYSQL_USER: user_service
      MYSQL_PASSWORD: ${USER_DB_PASSWORD:-1234}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3311:3306"
    volumes:
      - user_db_data:/var/lib/mysql
      - ./init-scripts/user-db-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservice-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "user_service"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M

  # Question Service DB
  question-db:
    image: mysql:8.0
    container_name: question-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-1234}
      MYSQL_DATABASE: question_service
      MYSQL_USER: question_service
      MYSQL_PASSWORD: ${QUESTION_DB_PASSWORD:-1234}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3307:3306"
    volumes:
      - question_db_data:/var/lib/mysql
      - ./init-scripts/question-db-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservice-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "question_service"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M

  # Answer Service DB  
  answer-db:
    image: mysql:8.0
    container_name: answer-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-1234}
      MYSQL_DATABASE: answer_service
      MYSQL_USER: answer_service
      MYSQL_PASSWORD: ${ANSWER_DB_PASSWORD:-1234}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3308:3306"
    volumes:
      - answer_db_data:/var/lib/mysql
      - ./init-scripts/answer-db-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservice-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "answer_service"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M

  # Statistic Service DB
  statistic-db:
    image: mysql:8.0
    container_name: statistic-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-1234}
      MYSQL_DATABASE: statistic_service
      MYSQL_USER: statistic_service
      MYSQL_PASSWORD: ${STATISTIC_DB_PASSWORD:-1234}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3309:3306"
    volumes:
      - statistic_db_data:/var/lib/mysql
      - ./init-scripts/statistic-db-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservice-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "statistic_service"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M

  # AI Feedback Service DB
  ai-feedback-db:
    image: mysql:8.0
    container_name: ai-feedback-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-1234}
      MYSQL_DATABASE: ai_feedback_service
      MYSQL_USER: ai_feedback_service
      MYSQL_PASSWORD: ${AI_FEEDBACK_DB_PASSWORD:-1234}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3310:3306"
    volumes:
      - ai_feedback_db_data:/var/lib/mysql
      - ./init-scripts/ai-feedback-db-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservice-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "ai_feedback_service"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    restart: unless-stopped
    ports:
      - "8081:8080"
    depends_on:
      user-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      SPRING_APPLICATION_NAME: user-service
      SPRING_DATASOURCE_URL: jdbc:mysql://user-db:3306/user_service?serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: user_service
      SPRING_DATASOURCE_PASSWORD: ${USER_DB_PASSWORD:-1234}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-1234}
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
      EUREKA_INSTANCE_IP_ADDRESS: user-service
      # S3 설정 (필요시)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-your-aws-access-key}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-your-aws-secret-key}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-your-s3-bucket-name}
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.7'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Question Service
  question-service:
    build:
      context: ./question-service
      dockerfile: Dockerfile
    container_name: question-service
    restart: unless-stopped
    ports:
      - "8082:8080"
    depends_on:
      question-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      SPRING_APPLICATION_NAME: question-service
      SPRING_DATASOURCE_URL: jdbc:mysql://question-db:3306/question_service?serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: question_service
      SPRING_DATASOURCE_PASSWORD: ${QUESTION_DB_PASSWORD:-1234}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-1234}
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
      EUREKA_INSTANCE_IP_ADDRESS: question-service
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Answer Service
  answer-service:
    build:
      context: ./answer-service
      dockerfile: Dockerfile
    container_name: answer-service
    restart: unless-stopped
    ports:
      - "8083:8080"
    depends_on:
      answer-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      question-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      SPRING_APPLICATION_NAME: answer-service
      SPRING_DATASOURCE_URL: jdbc:mysql://answer-db:3306/answer_service?serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: answer_service
      SPRING_DATASOURCE_PASSWORD: ${ANSWER_DB_PASSWORD:-1234}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-1234}
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
      EUREKA_INSTANCE_IP_ADDRESS: answer-service
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # AI Feedback Service
  ai-feedback-service:
    build:
      context: ./ai-feedback-service
      dockerfile: Dockerfile
    container_name: ai-feedback-service
    restart: unless-stopped
    ports:
      - "8084:8080"
    depends_on:
      ai-feedback-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      answer-service:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      SPRING_APPLICATION_NAME: ai-feedback-service
      SPRING_DATASOURCE_URL: jdbc:mysql://ai-feedback-db:3306/ai_feedback_service?serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: ai_feedback_service
      SPRING_DATASOURCE_PASSWORD: ${AI_FEEDBACK_DB_PASSWORD:-1234}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-1234}
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
      EUREKA_INSTANCE_IP_ADDRESS: ai-feedback-service
      # OpenAI API 설정
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your-openai-key-here}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-3.5-turbo}
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Statistic Service
  statistic-service:
    build:
      context: ./statistic-service
      dockerfile: Dockerfile
    container_name: statistic-service
    restart: unless-stopped
    ports:
      - "8085:8080"
    depends_on:
      statistic-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      SPRING_APPLICATION_NAME: statistic-service
      SPRING_DATASOURCE_URL: jdbc:mysql://statistic-db:3306/statistic_service?serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: statistic_service
      SPRING_DATASOURCE_PASSWORD: ${STATISTIC_DB_PASSWORD:-1234}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-1234}
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
      EUREKA_INSTANCE_IP_ADDRESS: statistic-service
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"  # 외부에서 접근하는 메인 포트
    depends_on:
      eureka-server:
        condition: service_healthy
      user-service:
        condition: service_healthy
      question-service:
        condition: service_healthy
      answer-service:
        condition: service_healthy
      ai-feedback-service:
        condition: service_healthy
      statistic-service:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      SPRING_APPLICATION_NAME: api-gateway
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
      EUREKA_INSTANCE_IP_ADDRESS: api-gateway
      # JWT 설정
      JWT_SECRET: ${JWT_SECRET:-1234567890123456789012345678901234567890123}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600000}
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

# 볼륨 설정 (각 서비스별 데이터 영속성)
volumes:
  user_db_data:
    driver: local
  question_db_data:
    driver: local
  answer_db_data:
    driver: local
  statistic_db_data:
    driver: local
  ai_feedback_db_data:
    driver: local
  redis_data:
    driver: local

# 네트워크 설정
networks:
  microservice-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16