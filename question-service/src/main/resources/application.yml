server:
  port: 8080 # 컨테이너 내부 포트. docker-compose.yml에서 8082:8080으로 매핑됩니다.

spring:
  application:
    name: question-service # Eureka 서버에 등록될 서비스 이름 (docker-compose.yml과 일치)

  # --- Docker Profile (docker-compose 실행 시 활성화) ---
  # docker-compose.yml의 'SPRING_PROFILES_ACTIVE: docker' 설정에 의해 이 프로파일이 활성화됩니다.
  profiles:
    active: docker

--- # 프로파일 분리 (docker 프로파일이 활성화될 때만 아래 설정이 적용됩니다)
spring:
  config:
    activate:
      on-profile: docker

  # 데이터베이스 설정 (docker-compose.yml의 question-db 서비스 참조)
  datasource:
    url: jdbc:mysql://question-db:3306/question_service?serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&useSSL=false
    username: question_service
    password: ${QUESTION_DB_PASSWORD:1234} # .env 파일에서 주입받거나 기본값 1234 사용
    driver-class-name: com.mysql.cj.jdbc.Driver

  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: update # 개발 단계에서는 update로 설정하여 엔티티 변경 시 DB 자동 반영
    show-sql: true
    properties:
      hibernate:
        default_batch_fetch_size: 100 # N+1 문제 완화를 위한 설정

  # Redis 설정 (docker-compose.yml의 redis 서비스 참조)
  data:
    redis:
      host: redis
      port: 6379
      password: ${REDIS_PASSWORD:1234} # .env 파일에서 주입받거나 기본값 1234 사용

# Eureka 클라이언트 설정 (docker-compose.yml의 eureka-server 서비스 참조)
eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka/
    register-with-eureka: true # Eureka에 자신을 등록
    fetch-registry: true       # Eureka에서 서비스 목록을 가져옴
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
    prefer-ip-address: true